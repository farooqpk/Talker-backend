// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  userId        String          @id @default(auto()) @map("_id") @db.ObjectId
  username      String          @unique
  password      String
  publicKey     String
  createdAt     DateTime
  messagesSent  Message[]       @relation("SentMessages")
  participants  Participants[]
  Group         Group[]
  ChatKey       ChatKey[]
  messageStatus MessageStatus[]
}

model Chat {
  chatId       String         @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime
  isGroup      Boolean        @default(false)
  messages     Message[]
  participants Participants[]
  Group        Group[]
  ChatKey      ChatKey[]
}

enum ContentType {
  TEXT
  AUDIO
  IMAGE
}

model Message {
  messageId   String          @id @default(auto()) @map("_id") @db.ObjectId
  chatId      String          @db.ObjectId
  senderId    String          @db.ObjectId
  content     String?
  contentType ContentType
  mediaPath   String?
  createdAt   DateTime
  isDeleted   Boolean         @default(false)
  status      MessageStatus[]
  chat        Chat            @relation(fields: [chatId], references: [chatId])
  sender      User            @relation("SentMessages", fields: [senderId], references: [userId])
}

model Participants {
  participantId String   @id @default(auto()) @map("_id") @db.ObjectId
  chatId        String   @db.ObjectId
  userId        String   @db.ObjectId
  createdAt     DateTime @db.Timestamp

  chat Chat @relation(fields: [chatId], references: [chatId])
  user User @relation(fields: [userId], references: [userId])
}

model Group {
  groupId     String   @id @default(auto()) @map("_id") @db.ObjectId
  chatId      String   @db.ObjectId
  name        String
  description String
  createdAt   DateTime
  adminId     String   @db.ObjectId
  // Relationships
  Chat        Chat     @relation(fields: [chatId], references: [chatId])
  admin       User     @relation(fields: [adminId], references: [userId])
}

model ChatKey {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  chatId       String @db.ObjectId
  userId       String @db.ObjectId
  encryptedKey String

  chat Chat @relation(fields: [chatId], references: [chatId])
  user User @relation(fields: [userId], references: [userId])
}

model MessageStatus {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  messageId String    @db.ObjectId
  userId    String    @db.ObjectId
  isRead    Boolean   @default(false)
  readAt    DateTime?

  message Message @relation(fields: [messageId], references: [messageId])
  user    User    @relation(fields: [userId], references: [userId])

  @@unique([messageId, userId])
}
