// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  userId       String         @id @default(auto()) @map("_id") @db.ObjectId
  username     String         @unique
  password     String
  publicKey    String
  createdAt    DateTime
  // Relationships
  messagesSent Message[]      @relation("SentMessages")
  participants Participants[]
  Group        Group[]
  GroupKey     GroupKey[]
}

model Chat {
  chatId       String         @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime
  isGroup      Boolean        @default(false)
  // Relationships
  messages     Message[]
  participants Participants[]
  Group        Group[]
}

enum ContentType {
  TEXT
  AUDIO
}

model Message {
  messageId                        String      @id @default(auto()) @map("_id") @db.ObjectId
  chatId                           String      @db.ObjectId
  senderId                         String      @db.ObjectId
  // for private chat starts
  contentForRecipient              String?
  contentForSender                 String?
  contentType                      ContentType
  encryptedSymetricKeyForRecipient String?
  encryptedSymetricKeyForSender    String?
  // for private chat ends
  contentForGroup                  String?
  createdAt                        DateTime
  // Relationships
  chat                             Chat        @relation(fields: [chatId], references: [chatId])
  sender                           User        @relation("SentMessages", fields: [senderId], references: [userId])
}

model Participants {
  participantId String   @id @default(auto()) @map("_id") @db.ObjectId
  chatId        String   @db.ObjectId
  userId        String   @db.ObjectId
  createdAt     DateTime @db.Timestamp

  chat Chat @relation(fields: [chatId], references: [chatId])
  user User @relation(fields: [userId], references: [userId])
}

model Group {
  groupId     String     @id @default(auto()) @map("_id") @db.ObjectId
  chatId      String     @db.ObjectId
  name        String
  description String
  createdAt   DateTime
  adminId     String     @db.ObjectId
  // Relationships
  Chat        Chat       @relation(fields: [chatId], references: [chatId])
  GroupKey    GroupKey[]
  admin       User       @relation(fields: [adminId], references: [userId])
}

model GroupKey {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  groupId           String   @db.ObjectId
  encryptedGroupKey String
  userId            String   @db.ObjectId
  createdAt         DateTime @db.Timestamp
  User              User     @relation(fields: [userId], references: [userId])
  Group             Group    @relation(fields: [groupId], references: [groupId])
}
